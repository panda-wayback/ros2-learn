---
description: 
globs: 
alwaysApply: true
---
# ROS2 项目开发规范

## 项目结构规范
- `src/`: 存放所有 ROS2 包的源代码
  - 每个包应该是一个独立的目录
  - 包名应该使用小写字母和下划线
  - 包目录结构应该遵循 ROS2 标准结构
- `scripts/`: 存放项目相关的脚本文件
  - 启动脚本
  - 工具脚本
  - 测试脚本
- `log/`: 存放运行时日志
  - 建议使用日期或时间戳命名日志文件
- `build/`: 编译输出目录（不要手动修改）
- `install/`: 安装目录（不要手动修改）

## 代码规范
- 使用 C++ 或 Python 开发
- 遵循 ROS2 的命名规范
  - 节点名：小写字母，下划线分隔
  - 话题名：小写字母，下划线分隔
  - 服务名：小写字母，下划线分隔
- 每个包必须包含：
  - `package.xml`
  - `CMakeLists.txt`（C++）或 `setup.py`（Python）
  - `README.md`

## 开发流程
1. 创建新包：
```bash
cd src
ros2 pkg create --build-type ament_cmake <package_name>
```

2. 编译项目：
```bash
colcon build
```

3. 运行节点：
```bash
source install/setup.bash
ros2 run <package_name> <node_name>
```

## 文档规范
- 每个包必须包含 README.md
- 文档应该包含：
  - 包的功能描述
  - 依赖说明
  - 使用说明
  - 示例代码

## 测试规范
- 每个包应该包含测试
- 测试文件放在 `test` 目录下
- 使用 ament_cmake 或 pytest 进行测试

## 版本控制
- 使用 git 进行版本控制
- 提交信息应该清晰描述更改内容
- 遵循语义化版本控制

## 参考链接
- @ROS2 官方文档
- @ROS2 包创建指南
- @ROS2 代码风格指南 